swagger: "2.0"
info:
  version: "0.0.1"
  title:  Time Management System
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /api/v1/register:
    x-swagger-router-controller: user
    post:
      description: Register new user into the system
      operationId: register
      parameters:
        - name: body
          in: body
          description: Details to register new Useruser.
          required: true
          schema:
            $ref: '#/definitions/RegisterUserRequest'
      responses:
        200:
          description: successfully registered user
          schema:
            $ref: '#/definitions/SuccessResponse'
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/login:
    x-swagger-router-controller: user
    post:
      description: User login
      operationId: login
      parameters:
        - name: body
          in: body
          description: Login credentials of the user.
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: successfully returns the JWT token
          schema:
            $ref: '#/definitions/SuccessResponse'
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/users/create:
    x-swagger-router-controller: user
    post:
      description: create new user 
      operationId: createUser
      security:
        - Bearer: []
      x-user-scopes: ['ADMIN', 'MANAGER']
      parameters:
        - name: body
          in: body
          description: Details to register new User.
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
      responses:
        200:
          description: successfully registered user
          schema:
            $ref: '#/definitions/SuccessResponse'
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/users/{userId}/timelogs/aggregated: 
    x-swagger-router-controller: timelog
    get:
      description: get aggregated timelogs grouped by day
      operationId: printTimelog
      security:
        - Bearer: []
      x-user-scopes: ['BASIC', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id for whom timelog is to be updated.
          required: true
          type: integer
          format: int32
        - in: query
          name: startDate
          description: starting date for range.
          type: string
          pattern: /^\d{4}-\d{2}-\d{2}$/
        - in: query
          name: endDate
          description: endDate for range.
          type: string
          pattern: /^\d{4}-\d{2}-\d{2}$/
      responses:
        200:
          description: Returns the list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/TimelogAggregateResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/users/{userId}/timelogs/{timelogId}:  
    x-swagger-router-controller: timelog
    put:
      description: update time log entry for user
      operationId: updateTimelog
      security:
        - Bearer: []
      x-user-scopes: ['BASIC', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id for whom timelog is to be updated.
          required: true
          type: integer
          format: int32
        - in: path
          name: timelogId
          description: id of timelog entry to be updated
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: timelog object to be updated
          required: true
          schema:
            $ref: '#/definitions/TimelogRequest'
      responses:
        200:
          description:  returns the updated timelog details
          schema: 
            $ref: '#/definitions/TimelogResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      description: delete timelog entry
      operationId: deleteTimelog
      security:
      - Bearer: []
      x-user-scopes: ['BASIC', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id for whom timelog is to be updated.
          required: true
          type: integer
          format: int32
        - in: path
          name: timelogId
          description: id of timelog entry to be updated
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Successfully deleted user
          schema:
            $ref: '#/definitions/SuccessResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/users/{userId}/timelogs:
    x-swagger-router-controller: timelog
    get:
      description: get all time log entries for a user
      operationId: getAllTimelogs
      security:
        - Bearer: []
      x-user-scopes: ['BASIC', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id for whom timelog is to be fetched.
          required: true
          type: integer
          format: int32
        - in: query
          name: page
          description: page after which the data is to be returned.
          required: true
          type: integer
        - in: query
          name: limit
          description: max no of records to be returned.
          required: true
          type: integer
      responses:
        200:
          description: Returns the list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/TimelogResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      description: create a new timelog entry
      operationId: createTimelog
      security:
        - Bearer: []
      x-user-scopes: ['BASIC', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id for whom timelog is to be fetched.
          required: true
          type: integer
          format: int32
        - name: body
          in: body
          description: Details to new timelog entry.
          required: true
          schema:
            $ref: '#/definitions/TimelogRequest'
      responses:
        200:
          description: successfully added timlog
          schema:
            $ref: '#/definitions/SuccessResponse'
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/v1/users/{userId}:
    x-swagger-router-controller: user
    get:
      description: Fetch user.
      operationId: get
      security:
        - Bearer: []
      x-user-scopes: ['ADMIN','MANAGER', 'BASIC']
      parameters:
        - in: path
          name: userId
          description: user id of the user to be updated.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Returns the list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      description: update own personal details
      operationId: update
      security:
        - Bearer: []
      x-user-scopes: ['BASIC', 'MANAGER', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id of the user to be updated.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: user details to be updated.
          required: true
          schema:
            $ref: '#/definitions/UserEditRequest'
      responses:
        200:
          description:  returns updated user details
          schema: 
            $ref: '#/definitions/UserResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      description: delete another user
      operationId: deleteUser
      security:
        - Bearer: []
      x-user-scopes: ['MANAGER', 'ADMIN']
      parameters:
        - in: path
          name: userId
          description: user id of the user to be updated.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Successfully deleted user
          schema:
            $ref: '#/definitions/SuccessResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/users:
    x-swagger-router-controller: user
    get:
      description: Fetch all users.
      operationId: getAll
      security:
        - Bearer: []
      x-user-scopes: ['ADMIN','MANAGER']
      parameters:
        - in: query
          name: page
          description: page after which the data is to be returned.
          required: true
          type: integer
        - in: query
          name: limit
          description: max no of records to be returned.
          required: true
          type: integer
      responses:
        200:
          description: Returns the list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResponse'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

  RegisterUserRequest:
    required:
      - firstName
      - lastName
      - email
      - password
      - employeeId
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
        maxLength: 80
        minLength: 1
        pattern: ^(?!\s*$).+
      password:
        type: string
        maxLength: 50
        minLength: 1
        pattern: ^(?!\s*$).+
      employeeId:
        type: string
  CreateUserRequest:
    required:
      - firstName
      - lastName
      - email
      - password
      - employeeId
      - role
      - preferredWorkingHourPerDay
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
        maxLength: 80
        minLength: 1
        pattern: ^(?!\s*$).+
      password:
        type: string
        maxLength: 50
        minLength: 1
        pattern: ^(?!\s*$).+
      preferredWorkingHourPerDay:
        type: integer
      employeeId:
        type: string
      role:
        type: string
        enum: ['BASIC','MANAGER','ADMIN']

  SuccessResponse:
    required:
      - message
    properties:
      message:
        type: string
  
  LoginRequest:
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        maxLength: 80
        minLength: 1
        pattern: ^(?!\s*$).+
      password:
        type: string
        maxLength: 50
        minLength: 1
        pattern: ^(?!\s*$).+

  UserResponse:
    type: object
    required:
      - id
      - employeeId
      - firstName
      - lastName
      - email
      - role
      - createdAt
      - preferredWorkingHourPerDay
    properties:
      id:
        type: integer
      employeeId:
        type: string
      firstName:
        type: string
        maxLength: 50
        minLength: 1
      lastName:
        type: string
        maxLength: 50
        minLength: 1
      email:
        type: string
        format: email
        maxLength: 80
        minLength: 1
      role: 
        type: string
        enum: ['ADMIN', 'BASIC', 'MANAGER']
      createdAt:
        type: string
        format: date-time
      preferredWorkingHourPerDay:
        type: integer
  UserEditRequest:
    required:
      - firstName
      - lastName
      - password
      - preferredWorkingHourPerDay
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
        maxLength: 50
        minLength: 1
        pattern: ^(?!\s*$).+
      preferredWorkingHourPerDay:
        type: integer
  TimelogRequest:
    type: object
    required:
      - loggedAt
      - duration
      - notes
    properties: 
      loggedAt:
        type: string
        format: date
      duration:
        type: integer
      notes:
        type: string
        maxLength: 2000
        minLength: 1
  TimelogResponse:
    type: object
    required:
      - id
      - loggedAt
      - duration
      - notes
      - userId
    properties:
      id:
        type: integer
      loggedAt:
        type: string
        format: date
      duration:
        type: integer
      notes:
        type: string
      userId:
        type: integer
  TimelogAggregateResponse:
    type: object
    required:
      - loggedAt
      - totalTimeLogged
      - aggregatedNotes
    properties:
      loggedAt:
        type: string
        format: date
      totalTimeLogged:
        type: integer
      aggregatedNotes:
        type: string

      
